<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonChangePath.Content" xml:space="preserve">
    <value>Change Location</value>
  </data>
  <data name="ButtonManualUpdate.Content" xml:space="preserve">
    <value>Manual Update</value>
  </data>
  <data name="ButtonResetTile.Content" xml:space="preserve">
    <value>Reset Tile</value>
  </data>
  <data name="CheckBoxMeteredNetwork.Content" xml:space="preserve">
    <value>Auto update even in metered network</value>
  </data>
  <data name="ComboBoxCropMethod.Header" xml:space="preserve">
    <value>Auto Crop</value>
  </data>
  <data name="ComboBoxItemCropCenter.Content" xml:space="preserve">
    <value>Center</value>
  </data>
  <data name="ComboBoxItemCropCenter.Tag" xml:space="preserve">
    <value>Trim top and bottom of an image if it too tall; Trim left and right if the image is too wide. It is recommended for non-character images (e.g. using "landscape" tag).</value>
  </data>
  <data name="ComboBoxItemCropDisabled.Content" xml:space="preserve">
    <value>Disabled</value>
  </data>
  <data name="ComboBoxItemCropDisabled.Tag" xml:space="preserve">
    <value>The application will not crop the image and let Windows to handle any aspect ratio difference. It is recommended if you offen rotate your device, or you have a multi-screen system with more than one aspect ratios.</value>
  </data>
  <data name="ComboBoxItemCropLargestFace.Content" xml:space="preserve">
    <value>Largest Face</value>
  </data>
  <data name="ComboBoxItemCropLargestFace.Tag" xml:space="preserve">
    <value>Crop around the largest face detected. Fall back to Top Center if no face is detected.  It is recommended for single-character images (e.g. using "aisaka_taiga" tag).</value>
  </data>
  <data name="ComboBoxItemCropMostFaces.Content" xml:space="preserve">
    <value>Most Faces</value>
  </data>
  <data name="ComboBoxItemCropMostFaces.Tag" xml:space="preserve">
    <value>Preserve as most faces as possible.  Fall back to Top Center if no face is detected.  It is recommended for multi-character group photo (e.g. using "k-on!" tag) to prevent some faces from being partial cut.</value>
  </data>
  <data name="ComboBoxItemCropTopCenter.Content" xml:space="preserve">
    <value>Top Center</value>
  </data>
  <data name="ComboBoxItemCropTopCenter.Tag" xml:space="preserve">
    <value>Preserve top part of an image if it too tall; Trim left and right if the image is too wide. It is recommended if face detection fails a lot of time (e.g. when using "bikini" tag).</value>
  </data>
  <data name="ComboBoxItemImageQualityHigh.Content" xml:space="preserve">
    <value>High</value>
  </data>
  <data name="ComboBoxItemImageQualityMedium.Content" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="ComboBoxQuality.Header" xml:space="preserve">
    <value>Image Quality</value>
  </data>
  <data name="ComboBoxTheme.Header" xml:space="preserve">
    <value>Application Theme</value>
  </data>
  <data name="TextBlockExperimental.Text" xml:space="preserve">
    <value>This setting is still in beta state. It may be untested and subject to change without notice. Using this experimental functionality may cause unexpected behaviors or crashes of the app. In the worst situation, you may have to reinstall this app to recover.</value>
  </data>
  <data name="TextBlockFilter.Text" xml:space="preserve">
    <value>Filter</value>
  </data>
  <data name="TextBlockLiveTileIcons.Text" xml:space="preserve">
    <value>Live Tile Icons</value>
  </data>
  <data name="TextBlockMinute.Text" xml:space="preserve">
    <value>min</value>
  </data>
  <data name="TextBlockRandom.Text" xml:space="preserve">
    <value>If your search tags are not that popular and do not have a lot of new images. You can random shuffle the top N search results so that at least it will not stuck at the most recently uploaded image.</value>
  </data>
  <data name="TextBlockRandomFirst.Text" xml:space="preserve">
    <value>Randomly Picking</value>
  </data>
  <data name="TextBlockRandomResults.Text" xml:space="preserve">
    <value>search results</value>
  </data>
  <data name="TextBlockRecords.Text" xml:space="preserve">
    <value>Records</value>
  </data>
  <data name="TextBlockSite.Text" xml:space="preserve">
    <value>Change the host: It will log you out, clear your wallpaper/lockscreen records and then restart the app for a different image booru site. Also, be aware that konachan only has horizontal images, DO NOT use the aspect ratio local filter to find vertical images.</value>
  </data>
  <data name="TextBlockTheme.Text" xml:space="preserve">
    <value>The application needs to be restarted to take effect</value>
  </data>
  <data name="TextBlockThemeDark.Text" xml:space="preserve">
    <value>Dark</value>
  </data>
  <data name="TextBlockThemeDefault.Text" xml:space="preserve">
    <value>Follow Windows</value>
  </data>
  <data name="TextBlockThemeLight.Text" xml:space="preserve">
    <value>Light</value>
  </data>
  <data name="TextBlockUpdateInterval.Text" xml:space="preserve">
    <value>Update Interval</value>
  </data>
  <data name="TextBoxTags.Header" xml:space="preserve">
    <value>Search Tags</value>
  </data>
  <data name="ToggleSwitchAutoLiveTile.Header" xml:space="preserve">
    <value>Auto update live tile in background</value>
  </data>
  <data name="ToggleSwitchAutoLockScreen.Header" xml:space="preserve">
    <value>Auto update lock screen in background</value>
  </data>
  <data name="ToggleSwitchDownloadPath.Header" xml:space="preserve">
    <value>Save downloaded images to a fixed location</value>
  </data>
</root>