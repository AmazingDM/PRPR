<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonChangePath.Content" xml:space="preserve">
    <value>更改路径</value>
  </data>
  <data name="ButtonManualUpdate.Content" xml:space="preserve">
    <value>手动刷新</value>
  </data>
  <data name="ButtonResetTile.Content" xml:space="preserve">
    <value>重设</value>
  </data>
  <data name="CheckBoxMeteredNetwork.Content" xml:space="preserve">
    <value>在付费网络下也自动刷新</value>
  </data>
  <data name="ComboBoxItemCropCenter.Content" xml:space="preserve">
    <value>置中</value>
  </data>
  <data name="ComboBoxItemCropCenter.Tag" xml:space="preserve">
    <value>原图太高时去掉上下两侧；原图太宽时去掉左右两侧。适用于纯风景图标籤(例如landscape)</value>
  </data>
  <data name="ComboBoxItemCropDisabled.Content" xml:space="preserve">
    <value>无剪裁</value>
  </data>
  <data name="ComboBoxItemCropDisabled.Tag" xml:space="preserve">
    <value>应用不预先剪裁原图并由系统决定显示效果。适合经常旋转屏幕的平板用户。也适合同时使用不同长阔比的多屏台式机用户</value>
  </data>
  <data name="ComboBoxItemCropLargestFace.Content" xml:space="preserve">
    <value>最大的脸</value>
  </data>
  <data name="ComboBoxItemCropLargestFace.Tag" xml:space="preserve">
    <value>剪裁时尽量环绕图中最大脸蛋。辨识不到动漫脸蛋时等于顶部置中。适用于人物标籤(例如aisaka_taiga)</value>
  </data>
  <data name="ComboBoxItemCropMostFaces.Content" xml:space="preserve">
    <value>最多的脸</value>
  </data>
  <data name="ComboBoxItemCropMostFaces.Tag" xml:space="preserve">
    <value>剪裁时尽量保留图中最多脸蛋，避免合照时出现脸蛋被剪去一半的情况。辨识不到动漫脸蛋时等于顶部置中。适用于动漫作品标籤(例如k-on!)</value>
  </data>
  <data name="ComboBoxItemCropTopCenter.Content" xml:space="preserve">
    <value>顶部置中</value>
  </data>
  <data name="ComboBoxItemCropTopCenter.Tag" xml:space="preserve">
    <value>原图太高时去掉底部；原图太宽时去掉左右两侧。适用于脸蛋辨识经常认错东西的场合(例如bikini)</value>
  </data>
  <data name="ComboBoxItemImageQualityHigh.Content" xml:space="preserve">
    <value>高</value>
  </data>
  <data name="ComboBoxItemImageQualityMedium.Content" xml:space="preserve">
    <value>中</value>
  </data>
  <data name="ComboBoxTheme.Header" xml:space="preserve">
    <value>应用主题</value>
  </data>
  <data name="TextBlockAutoCrop.Text" xml:space="preserve">
    <value>自动剪裁:</value>
  </data>
  <data name="TextBlockFilter.Text" xml:space="preserve">
    <value>过滤</value>
  </data>
  <data name="TextBlockImageQuality.Text" xml:space="preserve">
    <value>图片质量:</value>
  </data>
  <data name="TextBlockLiveTileIcons.Text" xml:space="preserve">
    <value>磁贴动态动漫头像</value>
  </data>
  <data name="TextBlockMinute.Text" xml:space="preserve">
    <value>分钟</value>
  </data>
  <data name="TextBlockRandom.Text" xml:space="preserve">
    <value>如果您要搜的标籤经常没有新图片上传，您可以选择随机洗牌最新的数张图，这样不至于长期无法自动更换壁纸</value>
  </data>
  <data name="TextBlockRandomFirst.Text" xml:space="preserve">
    <value>随机选取首</value>
  </data>
  <data name="TextBlockRandomResults.Text" xml:space="preserve">
    <value>个搜索结果</value>
  </data>
  <data name="TextBlockSearchTag.Text" xml:space="preserve">
    <value>搜索标籤：</value>
  </data>
  <data name="TextBlockTheme.Text" xml:space="preserve">
    <value>更改主题设置后需要重启应用才会生效</value>
  </data>
  <data name="TextBlockThemeDark.Text" xml:space="preserve">
    <value>暗</value>
  </data>
  <data name="TextBlockThemeDefault.Text" xml:space="preserve">
    <value>由系统决定</value>
  </data>
  <data name="TextBlockThemeLight.Text" xml:space="preserve">
    <value>亮</value>
  </data>
  <data name="TextBlockUpdateInterval.Text" xml:space="preserve">
    <value>换图间隔：</value>
  </data>
  <data name="ToggleSwitchAutoLiveTile.Header" xml:space="preserve">
    <value>后台定期自动刷新磁贴</value>
  </data>
  <data name="ToggleSwitchAutoLockScreen.Header" xml:space="preserve">
    <value>后台定期自动刷新锁屏</value>
  </data>
  <data name="ToggleSwitchDownloadPath.Header" xml:space="preserve">
    <value>下载时使用指定路径</value>
  </data>
</root>